/*!
 * Jasny Bootstrap v3.1.0 (http://jasny.github.io/bootstrap)
 * Copyright 2012-2014 Arnold Daniels
 * Licensed under Apache-2.0 (https://github.com/jasny/bootstrap/blob/master/LICENSE)
 */
if ("undefined" == typeof jQuery) throw new Error("Jasny Bootstrap's JavaScript requires jQuery"); +
function (e) {
    "use strict";
    var t = function (n, r) {
            this.$element = e(n), this.options = e.extend({}, t.DEFAULTS, r), this.state = null, this.options.recalc && (this.calcClone(), e(window).on("resize", e.proxy(this.recalc, this))), this.options.autohide && e(document).on("click", e.proxy(this.autohide, this)), this.options.toggle && this.toggle()
        };
    t.DEFAULTS = {
        toggle: !0,
        placement: "left",
        autohide: !0,
        recalc: !0
    }, t.prototype.offset = function () {
        switch (this.options.placement) {
        case "left":
        case "right":
            return this.$element.outerWidth();
        case "top":
        case "bottom":
            return this.$element.outerHeight()
        }
    }, t.prototype.calcPlacement = function () {
        function t(e, t) {
            if ("auto" === i.css(t)) return e;
            if ("auto" === i.css(e)) return t;
            var n = parseInt(i.css(e), 10),
                r = parseInt(i.css(t), 10);
            return n > r ? t : e
        }
        var n = e(window).width() / this.$element.width(),
            r = e(window).height() / this.$element.height();
        this.$element.hasClass("in") || this.$element.css("visiblity", "hidden !important").addClass("in");
        var i = this.$element;
        this.options.placement = n > r ? t("left", "right") : t("top", "bottom"), "hidden !important" === this.$element.css("visibility") && this.$element.removeClass("in").css("visiblity", "")
    }, t.prototype.opposite = function (e) {
        switch (e) {
        case "top":
            return "bottom";
        case "left":
            return "right";
        case "bottom":
            return "top";
        case "right":
            return "left"
        }
    }, t.prototype.getCanvasElements = function () {
        var t = this.options.canvas ? e(this.options.canvas) : this.$element,
            n = t.find("*").filter(function () {
                return "fixed" === e(this).css("position")
            }).not(this.options.exclude);
        return t.add(n)
    }, t.prototype.slide = function (t, n, r) {
        if (!e.support.transition) {
            var i = {};
            return i[this.options.placement] = "+=" + n, t.animate(i, 350, r)
        }
        var s = this.options.placement,
            o = this.opposite(s);
        t.each(function () {
            "auto" !== e(this).css(s) && e(this).css(s, (parseInt(e(this).css(s), 10) || 0) + n), "auto" !== e(this).css(o) && e(this).css(o, (parseInt(e(this).css(o), 10) || 0) - n)
        }), this.$element.one(e.support.transition.end, r).emulateTransitionEnd(350)
    }, t.prototype.disableScrolling = function () {
        var t = e("body").width(),
            n = "padding-" + this.opposite(this.options.placement);
        if (void 0 === e("body").data("offcanvas-style") && e("body").data("offcanvas-style", e("body").attr("style")), e("body").css("overflow", "hidden"), e("body").width() > t) {
            var r = parseInt(e("body").css(n), 10) + e("body").width() - t;
            setTimeout(function () {
                e("body").css(n, r)
            }, 1)
        }
    }, t.prototype.show = function () {
        if (!this.state) {
            var t = e.Event("show.bs.offcanvas");
            if (this.$element.trigger(t), !t.isDefaultPrevented()) {
                "auto" === this.options.placement && this.calcPlacement(), this.state = "sliding";
                var n = this.getCanvasElements(),
                    r = this.offset(),
                    i = this.options.placement,
                    s = this.opposite(i);
                n.addClass("canvas-sliding").each(function () {
                    e(this).data("offcanvas-style", e(this).attr("style") || ""), "static" === e(this).css("position") && e(this).css("position", "relative"), "auto" !== e(this).css(i) && "0px" !== e(this).css(i) || "auto" !== e(this).css(s) && "0px" !== e(this).css(s) || e(this).css(i, 0)
                }), -1 !== n.index(this.$element) && this.$element.css(i, -1 * r), this.disableScrolling();
                var o = function () {
                        this.state = "slid", n.removeClass("canvas-sliding").addClass("canvas-slid"), this.$element.trigger("shown.bs.offcanvas")
                    };
                setTimeout(e.proxy(function () {
                    this.$element.addClass("in"), this.slide(n, r, e.proxy(o, this))
                }, this), 1)
            }
        }
    }, t.prototype.hide = function () {
        if ("slid" === this.state) {
            var t = e.Event("hide.bs.offcanvas");
            if (this.$element.trigger(t), !t.isDefaultPrevented()) {
                this.state = "sliding";
                var n = e(".canvas-slid"),
                    r = -1 * this.offset(),
                    i = function () {
                        this.state = null, this.$element.removeClass("in"), n.removeClass("canvas-sliding"), n.add("body").each(function () {
                            e(this).attr("style", e(this).data("offcanvas-style")).removeData("offcanvas-style")
                        }), this.$element.trigger("hidden.bs.offcanvas")
                    };
                n.removeClass("canvas-slid").addClass("canvas-sliding"), setTimeout(e.proxy(function () {
                    this.slide(n, r, e.proxy(i, this))
                }, this), 1)
            }
        }
    }, t.prototype.toggle = function () {
        "sliding" !== this.state && this["slid" === this.state ? "hide" : "show"]()
    }, t.prototype.calcClone = function () {
        this.$calcClone = this.$element.clone().html("").addClass("offcanvas-clone").removeClass("in").appendTo(e("body"))
    }, t.prototype.recalc = function () {
        if ("slid" === this.state() && "none" !== this.$calcClone.css("display")) {
            var t = -1 * this.offset(),
                n = this.options.placement;
            this.getCanvasElements().each(function () {
                e(this).css(n, (parseInt(e(this).css(n), 10) || 0) + t)
            }).removeClass("canvas-slid"), e("body").css("overflow", ""), this.$element.css(n, "").removeClass("in canvas-slid")
        }
    }, t.prototype.autohide = function (t) {
        0 === e(t.target).closest(this.$element).length && this.hide()
    };
    var n = e.fn.offcanvas;
    e.fn.offcanvas = function (n) {
        return this.each(function () {
            var r = e(this),
                i = r.data("bs.offcanvas"),
                s = e.extend({}, t.DEFAULTS, r.data(), "object" == typeof n && n);
            i || r.data("bs.offcanvas", i = new t(this, s)), "string" == typeof n && i[n]()
        })
    }, e.fn.offcanvas.Constructor = t, e.fn.offcanvas.noConflict = function () {
        return e.fn.offcanvas = n, this
    }, e(document).on("click.bs.offcanvas.data-api", "[data-toggle=offcanvas]", function (t) {
        var n, r = e(this),
            i = r.attr("data-target") || t.preventDefault() || (n = r.attr("href")) && n.replace(/.*(?=#[^\s]+$)/, ""),
            s = e(i),
            o = s.data("bs.offcanvas"),
            u = o ? "toggle" : r.data();
        t.stopPropagation(), o ? o.toggle() : s.offcanvas(u)
    })
}(window.jQuery), +
function (e) {
    "use strict";
    var t = function (n, r) {
            this.$element = e(n), this.options = e.extend({}, t.DEFAULTS, r), this.$element.on("click.bs.rowlink", "td:not(.rowlink-skip):not(.actions)", e.proxy(this.click, this))
        };
    t.DEFAULTS = {
        target: "a.linkrow"
    }, t.prototype.click = function (t) {
        var n = e(t.currentTarget).closest("tr").find(this.options.target)[0];
        if (e(t.target)[0] !== n) if (t.preventDefault(), n.click) n.click();
        else if (document.createEvent) {
            var r = document.createEvent("MouseEvents");
            r.initMouseEvent("click", !0, !0, window, 0, 0, 0, 0, 0, !1, !1, !1, !1, 0, null), n.dispatchEvent(r)
        }
    };
    var n = e.fn.rowlink;
    e.fn.rowlink = function (n) {
        return this.each(function () {
            var r = e(this),
                i = r.data("rowlink");
            i || r.data("rowlink", i = new t(this, n))
        })
    }, e.fn.rowlink.Constructor = t, e.fn.rowlink.noConflict = function () {
        return e.fn.rowlink = n, this
    }, e(document).on("click.bs.rowlink.data-api", '[data-link="row"]', function (t) {
        var n = e(this);
        n.data("rowlink") || (n.rowlink(n.data()), e(t.target).trigger("click.bs.rowlink"))
    })
}(window.jQuery), +
function (e) {
    "use strict";
    var t = "Microsoft Internet Explorer" == window.navigator.appName,
        n = function (t, n) {
            if (this.$element = e(t), this.$input = this.$element.find(":file"), 0 !== this.$input.length) {
                this.name = this.$input.attr("name") || n.name, this.$hidden = this.$element.find('input[type=hidden][name="' + this.name + '"]'), 0 === this.$hidden.length && (this.$hidden = e('<input type="hidden" />'), this.$element.prepend(this.$hidden)), this.$preview = this.$element.find(".fileinput-preview");
                var r = this.$preview.css("height");
                "inline" != this.$preview.css("display") && "0px" != r && "none" != r && this.$preview.css("line-height", r), this.original = {
                    exists: this.$element.hasClass("fileinput-exists"),
                    preview: this.$preview.html(),
                    hiddenVal: this.$hidden.val()
                }, this.listen()
            }
        };
    n.prototype.listen = function () {
        this.$input.on("change.bs.fileinput", e.proxy(this.change, this)), e(this.$input[0].form).on("reset.bs.fileinput", e.proxy(this.reset, this)), this.$element.find('[data-trigger="fileinput"]').on("click.bs.fileinput", e.proxy(this.trigger, this)), this.$element.find('[data-dismiss="fileinput"]').on("click.bs.fileinput", e.proxy(this.clear, this))
    }, n.prototype.change = function (t) {
        if (void 0 === t.target.files && (t.target.files = t.target && t.target.value ? [{
            name: t.target.value.replace(/^.+\\/, "")
        }] : []), 0 !== t.target.files.length) {
            this.$hidden.val(""), this.$hidden.attr("name", ""), this.$input.attr("name", this.name);
            var n = t.target.files[0];
            if (this.$preview.length > 0 && ("undefined" != typeof n.type ? n.type.match("image.*") : n.name.match(/\.(gif|png|jpe?g)$/i)) && "undefined" != typeof FileReader) {
                var r = new FileReader,
                    i = this.$preview,
                    s = this.$element;
                r.onload = function (r) {
                    var o = e("<img>");
                    o[0].src = r.target.result, t.target.files[0].result = r.target.result, s.find(".fileinput-filename").text(n.name), "none" != i.css("max-height") && o.css("max-height", parseInt(i.css("max-height"), 10) - parseInt(i.css("padding-top"), 10) - parseInt(i.css("padding-bottom"), 10) - parseInt(i.css("border-top"), 10) - parseInt(i.css("border-bottom"), 10)), i.html(o), s.addClass("fileinput-exists").removeClass("fileinput-new"), s.trigger("change.bs.fileinput", t.target.files)
                }, r.readAsDataURL(n)
            } else this.$element.find(".fileinput-filename").text(n.name), this.$preview.text(n.name), this.$element.addClass("fileinput-exists").removeClass("fileinput-new"), this.$element.trigger("change.bs.fileinput")
        }
    }, n.prototype.clear = function (e) {
        if (e && e.preventDefault(), this.$hidden.val(""), this.$hidden.attr("name", this.name), this.$input.attr("name", ""), t) {
            var n = this.$input.clone(!0);
            this.$input.after(n), this.$input.remove(), this.$input = n
        } else this.$input.val("");
        this.$preview.html(""), this.$element.find(".fileinput-filename").text(""), this.$element.addClass("fileinput-new").removeClass("fileinput-exists"), e !== !1 && (this.$input.trigger("change"), this.$element.trigger("clear.bs.fileinput"))
    }, n.prototype.reset = function () {
        this.clear(!1), this.$hidden.val(this.original.hiddenVal), this.$preview.html(this.original.preview), this.$element.find(".fileinput-filename").text(""), this.original.exists ? this.$element.addClass("fileinput-exists").removeClass("fileinput-new") : this.$element.addClass("fileinput-new").removeClass("fileinput-exists"), this.$element.trigger("reset.bs.fileinput")
    }, n.prototype.trigger = function (e) {
        this.$input.trigger("click"), e.preventDefault()
    };
    var r = e.fn.fileinput;
    e.fn.fileinput = function (t) {
        return this.each(function () {
            var r = e(this),
                i = r.data("fileinput");
            i || r.data("fileinput", i = new n(this, t)), "string" == typeof t && i[t]()
        })
    }, e.fn.fileinput.Constructor = n, e.fn.fileinput.noConflict = function () {
        return e.fn.fileinput = r, this
    }, e(document).on("click.fileinput.data-api", '[data-provides="fileinput"]', function (t) {
        var n = e(this);
        if (!n.data("fileinput")) {
            n.fileinput(n.data());
            var r = e(t.target).closest('[data-dismiss="fileinput"],[data-trigger="fileinput"]');
            r.length > 0 && (t.preventDefault(), r.trigger("click.bs.fileinput"))
        }
    })
}(window.jQuery)